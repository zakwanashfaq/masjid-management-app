AWSTemplateFormatVersion: 2010-09-09
Description: API definition for the masjid_serverless_api
  masjid_serverless_api
Transform:
- AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: MyLambdaRequestAuthorizer
        Authorizers:
          MyLambdaRequestAuthorizer:
            FunctionArn: !GetAtt ValidateTokenAuthorizer.Arn
            Identity:
              Header: Authorization
              ValidationExpression: Bearer.*

  # This is a Lambda function config associated with the source code: get-all-items.js
  getAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-all-items.getAllItemsHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from
        a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
      - DynamoDBCrudPolicy:
          TableName: !Ref SampleTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref SampleTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: login.js
  loginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/auth/login.loginWithUsernamePassword
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 30
      Description: A simple example includes a HTTP get method to get all items from
        a DynamoDB table.
      # Policies:
      #   # Give Create/Read/Update/Delete Permissions to the SampleTable
      # - DynamoDBCrudPolicy:
      #     TableName: !Ref SampleTable
      # Environment:
      #   Variables:
      #     # Make table name accessible as environment variable from function code during execution
      #     SAMPLE_TABLE: !Ref SampleTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /login
            Method: POST

  signUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/auth/signup.signUpWithUsernamePassword
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 30
      Description: A simple example includes a HTTP get method to get all items from
        a DynamoDB table.
      # Policies:
      #   # Give Create/Read/Update/Delete Permissions to the SampleTable
      # - DynamoDBCrudPolicy:
      #     TableName: !Ref SampleTable
      # Environment:
      #   Variables:
      #     # Make table name accessible as environment variable from function code during execution
      #     SAMPLE_TABLE: !Ref SampleTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /signup
            Method: POST


  savePrayerTimeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/prayerTimes/setPrayerTimes.handler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 30
      Description: A simple example includes a HTTP get method to get all items from
        a DynamoDB table.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /prayerTime
            Method: POST

  getLandingPageDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/getLandingPageData.handler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 30
      Description: A simple example includes a HTTP get method to get all items from
        a DynamoDB table.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /landingPageData
            Method: GET
    

  # This is a Lambda function config associated with the source code: get-by-id.js
  getByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-by-id.getByIdHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by
        id from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
      - DynamoDBCrudPolicy:
          TableName: !Ref SampleTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref SampleTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{id}
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: put-item.js
  putItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/put-item.putItemHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to
        a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
      - DynamoDBCrudPolicy:
          TableName: !Ref SampleTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          SAMPLE_TABLE: !Ref SampleTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: POST
  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable

  ValidateTokenAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      # CodeUri: authorizer/
      Handler: src/handlers/auth/authorizer.handler
      Runtime: nodejs14.x

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  SampleTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    LoggingConfig:
      LogFormat: JSON
  Api:
    Cors:
      AllowMethods: "'OPTIONS,GET,PUT,POST,DELETE'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"
